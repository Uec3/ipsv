import pymurapi as mur
import time
from time import sleep
auv=mur.mur_init()
prev_time_depth=1
prev_error_depth=1
prev_error_yaw=1
prev_time_yaw=1
target_yaw=1
target_depth = 3
ierror_yaw = 0
ik_yaw=0
def sr_skol():
    global target_yaw
    now_yaw=0
    counter=0
    for counter in range(7):
        now_yaw = now_yaw+auv.get_yaw()
    return abs(now_yaw/7-target_yaw)<2
def start_move():
    start_depth()
    start_yaw()
def start_depth():
    curent_time = int(round(time.time()*1000))
    global target_depth
    global prev_time_depth
    global prev_error_depth
    error = auv.get_depth()-target_depth
    dif  = 0
    if(curent_time-prev_time_depth!=0 and error - prev_error_depth!=0 ):
        dif = 5/((curent_time-prev_time_depth)*(error - prev_error_depth))
    power_value = error*50+dif*60
    power_1 =int(power_value)
    power_2 =int(power_value)
    if(power_value > 100):
        power_value =100
    if(power_value <0):
        power_value =0
    auv.set_motor_power(2,(power_1))
    auv.set_motor_power(3,(power_2))
    prev_time_depth = curent_time
    prev_error_depth = error
def start_yaw():
    global ierror_yaw
    ik_yaw=0.00001
    global spd_yaw
    global prev_error_yaw
    global target_yaw 
    global prev_time_yaw
    curent_time = int(round(time.time()*1000))
    error = auv.get_yaw()-target_yaw
    if(error>0):
        ierror_yaw=ierror_yaw+1
    if(error<0):
        ierror_yaw=ierror_yaw-1    
    dif=0
    if((curent_time-prev_time_yaw)*(error - prev_error_yaw)!=0):
        dif = 3/(curent_time-prev_time_yaw)*(error - prev_error_yaw)
   # if(dif!=0):
      #  print(dif)
    #print(prev_error_yaw)
    power_value = error*0.3+dif*60+ierror_yaw*ik_yaw
    power_1 =int(power_value)
    power_2 =int(power_value)
    if(power_value > 20):
        power_value =20
    if(power_value <0):
        power_value =0
    auv.set_motor_power(0,(spd_yaw-power_1))
    auv.set_motor_power(1,(spd_yaw+power_2))
    prev_time_yaw = curent_time
    prev_error_yaw = error                                               
def set_course(yaw,depth,spd_yaw_target):
    global spd_yaw
    spd_yaw = spd_yaw_target
    global target_depth
    target_depth = depth
    global target_yaw
    target_yaw = yaw
def Akustic_angle(number):
    buff = auv.get_pinger_data(number)        
    return buff[0]
def Akustic_range(number):
    buff = auv.get_pinger_data(number)        
    return buff[1]
mission=0
class Akustic(object):
    def __init__(self,angle,range):
        self.angle=angle
        self.range=range
while True:
    #print(-Akustic_1.angle+old_yaw)
    auv.set_on_delay(1000)
    auv.set_rgb_color(0, 0, 255)
    global target_yaw
    #sleep(01)
    global mission
    if(Akustic_angle(1)+Akustic_angle(0)+Akustic_angle(2)+Akustic_angle(3)!=0 and mission ==0):
        Akustik_0=Akustic(Akustic_angle(0),Akustic_range(0))     
        Akustik_1=Akustic(Akustic_angle(1),Akustic_range(1))
        Akustik_2=Akustic(Akustic_angle(2),Akustic_range(2))
        Akustik_3=Akustic(Akustic_angle(3),Akustic_range(3))
        mission=1
    if(mission==1):
        #print(1)
        set_course(Akustik_0.angle,1.7,20*sr_skol())
        start_move()
        old_angle = auv.get_yaw()
        print(Akustic_angle(1))
        if((Akustic_range(0)-2.1)<0 and mission ==1):
            mission = 2
            #print(mission)
            #auv.drop()
            old_yaw = auv.get_yaw()
            #print(Akustik_1.angle)
            Akustik_0=Akustic(Akustic_angle(0),Akustic_range(0))     
            Akustik_1=Akustic(Akustic_angle(1),Akustic_range(1))
            Akustik_2=Akustic(Akustic_angle(2),Akustic_range(2))
            Akustik_3=Akustic(Akustic_angle(3),Akustic_range(3))
    if(mission == 2):
        print(Akustic_angle(1))
        #print(-now_yaw+Akustik_1.angle)
        set_course(Akustik_1.angle-old_yaw,1.7,20*sr_skol())
        start_move()
