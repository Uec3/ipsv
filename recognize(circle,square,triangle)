import pymurapi as mur
import time
from time import sleep
import numpy as np
import cv2 as cv
import math 
auv=mur.mur_init()
mission=1
prev_time_depth=1
prev_error_depth=1
prev_error_yaw=1
prev_time_yaw=1
target_yaw=1
target_depth = 3
ierror_yaw = 0
ik_yaw=0
first_marker = 0
second_marker = 0
third_marker = 0
fourth_marker = 0
target_x=0
target_y=0
alignment_angle=0
def alignment():
    global alignment_angle
    global target_x
    global target_y
    dx = abs(int(145 - target_x))
    dy = int(100 - target_y)
    if(dx!=145 and dy!=100):
        try:
            radian = math.atan(dx/dy)
        except ZeroDivisionError:
            radian = 2*np.pi
        #if(abs(radian-2*np.pi)<0.1):
        deegrees = math.degrees(radian)/2
        if(deegrees<0):
            deegrees=180
        alignment_angle=deegrees
        print(deegrees)
        
        #if(deegrees+auv.get_yaw()>180):
        #    print("exxept")
         #   deegrees=deegrees
       # print(dx*dx+dy*dy)
        if(dx*dx+dy*dy)>0:
            return 1123
        else:
            return 1110101010101
               
    else:
        return 1010101010101
dt = np.dtype(int)
lower = np.array((0,58,127),dt)
upper = np.array((102,255,255),dt)
def recognize(img):
    global target_x
    global target_y
    cv.cvtColor(img,cv.COLOR_BGR2HSV)
    thresh = cv.inRange(img,lower,upper,img)
    contours,hierarchy=cv.findContours( thresh.copy(), cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE)
    cnt= 0 
    for cnt in contours:
        if(cv.contourArea(cnt)>300):
            #print(cv.contourArea(cnt))
            #cv.circle(img,(145,85),5,(255,0,0),3)
            moments = cv.moments(thresh, 1)
            dM01 = moments['m01']
            dM10 = moments['m10']
            dArea = moments['m00']
            target_x = int(dM10/dArea)
            target_y = int(dM01/dArea)
            #print(target_x)
            #print(target_y)
            cv.circle(img,(target_x,target_y),5,(255,0,0),3)
            cv.line(img,(145,100),(target_x,target_y),(255,0,0),3)
            area = cv.contourArea(cnt)
            area_circle=0
            (x,y), r = cv.minEnclosingCircle(cnt)
            center = (int(x), int(y))
            area_circle = np.pi*r*r
            check_circle = abs(cv.contourArea(cnt)-area_circle)
            rect = cv.minAreaRect(cnt)
            box = cv.boxPoints(rect)
            box = np.int0(box) 
            rectangle = cv.contourArea(box)
            check_square = abs(rectangle-cv.contourArea(cnt))
            #print(check_square)
            if(check_circle <100):
                return 1
            elif(check_square<120):
                return 2
            elif(abs(area-900)<100):
                return 3
            else:
                return 0
        
    cv.imshow("2",img)
    cv.waitKey(10)      
    
def sr_skol():
    global target_yaw
    now_yaw=0
    counter=0
    for counter in range(7):
        now_yaw = now_yaw+auv.get_yaw()
    return abs(now_yaw/7-target_yaw)<2
def start_move():
    start_depth()
    start_yaw()
def start_depth():
    curent_time = int(round(time.time()*1000))
    global target_depth
    global prev_time_depth
    global prev_error_depth
    error = auv.get_depth()-target_depth
    dif  = 0
    if(curent_time-prev_time_depth!=0 and error - prev_error_depth!=0 ):
        dif = 5/((curent_time-prev_time_depth)*(error - prev_error_depth))
        if(dif>2):
            dif=2
    power_value = error*50+dif*0
    power_1 =int(power_value)
    power_2 =int(power_value)
    if(power_value > 100):
        power_value =100
    if(power_value <0):
        power_value =0
    auv.set_motor_power(2,(power_1))
    auv.set_motor_power(3,(power_2))
    prev_time_depth = curent_time
    prev_error_depth = error
def start_yaw():
    global mission
    global ierror_yaw
    ik_yaw=0.0007
    global spd_yaw
    global prev_error_yaw
    global target_yaw 
    global prev_time_yaw
    curent_time = int(round(time.time()*1000))
    #error = auv.get_yaw()-target_yaw
    
    error = (target_yaw-auv.get_yaw() + 540)%360 -180
    #print(error)
    if(error<0):
        ierror_yaw=ierror_yaw+1
    if(error>0):
        ierror_yaw=ierror_yaw-1    
    dif=0
    if((curent_time-prev_time_yaw)*(error - prev_error_yaw)!=0):
        dif = 7/(curent_time-prev_time_yaw)*(error - prev_error_yaw)
    power_value = error*0.3+dif*10-ierror_yaw*ik_yaw
    #print(power_value)
    power_1 =int(power_value)
    power_2 =int(power_value)
    if(power_value > 100):
        power_value =100
    if(power_value <-100):
        power_value =-100
    auv.set_motor_power(0,(spd_yaw+power_1))
    auv.set_motor_power(1,(spd_yaw-power_2))
    prev_time_yaw = curent_time
    prev_error_yaw = error                                               
def set_course(yaw,depth,spd_yaw_target):
    global spd_yaw
    spd_yaw = spd_yaw_target
    global target_depth
    target_depth = depth
    global target_yaw
    target_yaw = yaw
def Akustic_angle(number):
    buff = auv.get_pinger_data(number)        
    return buff[0]
def Akustic_range(number):
    buff = auv.get_pinger_data(number)        
    return buff[1]
akustic_old_range=666
counter = 0
end=0
class Akustic(object):
    def __init__(self,angle,range):
        self.angle=angle
        self.range=range
while True:
    if(Akustic_angle(0)+Akustic_angle(1)+Akustic_angle(2)+Akustic_angle(3)!=0):
        #print(190//180)
        global end
        global alignment_angle
        global akustic_old_range
        global first_marker
        global second_marker
        global third_marker
        global fourth_marker
        global target_yaw
        global mission
        global counter
        recognize(auv.get_image_bottom())
        #alignment()
        Akustik_0=Akustic(Akustic_angle(0),Akustic_range(0))     
        Akustik_1=Akustic(Akustic_angle(1),Akustic_range(1))
        Akustik_2=Akustic(Akustic_angle(2),Akustic_range(2))
        Akustik_3=Akustic(Akustic_angle(3),Akustic_range(3))
       # print(mission)
        #print(sr_skol())
        if(mission==1):
            #print("seach first")
            #print( first_marker)
            #print(Akustik_0.range)
            set_course(auv.get_yaw()+Akustik_0.angle,1.4,30*sr_skol())
            start_move()
            #print(Akustik_0.range-akustic_old_range<0)   
            if( mission ==1 and Akustik_0.range<2.4 and Akustik_1.range>2 and Akustik_2.range>2 and Akustik_3.range>2 and alignment()!= 1010101010101):
                mission=2
                #old_yaw = auv.get_yaw()
                #auv.drop()
                #while (alignment()):
                   # set_course((auv.get_yaw()+alignment()%180),2,20*sr_skol())
                    #start_move()
        if(mission==2):
            #print(alignment()
            if(alignment()==1110101010101 or alignment()==1010101010101 ):
                first_marker = recognize(auv.get_image_bottom())
                #auv.shoot()
                if(first_marker==1):
                    auv.drop()
                mission=3
            set_course(auv.get_yaw()+alignment_angle,2,20*sr_skol())
            start_move()
        if(mission == 3):
            #print("seach secound")
            #print( second_marker)
            #print(Akustik_1.angle)
            #print(Akustik_1.range)
            set_course(auv.get_yaw()+Akustik_1.angle,1.4,30*sr_skol())
            start_move()
            if(mission ==3 and Akustik_1.range<2.4 and Akustik_0.range>2 and Akustik_2.range>2 and Akustik_3.range>2 and alignment()!= 1010101010101):
                mission=4
                #print(missi
        if(mission==4):
            #print(alignment())
            if(alignment()==1110101010101 or alignment()==1010101010101 ):
                second_marker = recognize(auv.get_image_bottom())
                #auv.shoot()
                if(second_marker==1):
                    auv.drop()
                mission=5
            set_course(auv.get_yaw()+alignment_angle,2,20*sr_skol())
            start_move() 
        if(mission == 5):
            #print("seach third")
            #print( third_marker)
            #print(Akustik_2.range)
            #print(Akustik_1.angle)
            set_course(auv.get_yaw()+Akustik_2.angle,1.4,30*sr_skol())
            start_move()
            if(mission ==5 and Akustik_2.range<2.4 and Akustik_1.range>2 and Akustik_0.range>2 and Akustik_3.range>2 and alignment()!= 1010101010101):
                mission=6
        if (mission ==6):
            if(alignment()==1110101010101 or alignment()==1010101010101 ):
                #auv.shoot()
                third_marker = recognize(auv.get_image_bottom())
                if(third_marker==1):
                    auv.drop()
                mission=7
            set_course(auv.get_yaw()+alignment_angle,2,20*sr_skol())
            start_move() 
        if(mission == 7):
            set_course(auv.get_yaw()+Akustik_3.angle,1.4,30*sr_skol())
            start_move()
            if(mission ==7 and Akustik_3.range<2.4 and Akustik_1.range>2 and Akustik_2.range>2 and Akustik_0.range>2 and alignment()!= 1010101010101):
                mission=8
        if (mission ==8):
            if(alignment()==1110101010101 or alignment()==1010101010101 ):
                #auv.shoot()
                fourth_marker = recognize(auv.get_image_bottom())
                if(fourth_marker==1):
                    auv.drop()
                mission=9
            set_course(auv.get_yaw()+alignment_angle,2,20*sr_skol())
            start_move()
        if(mission==9):
            if(first_marker == 3):
                end=0
            elif(second_marker==3):
                end=1
            elif(third_marker==3):
                end=2
            elif(fourth_marker==3):
                end=4
            mission=10
        if(mission==10):
            set_course(auv.get_yaw()+Akustic_angle(end),1.4,30*sr_skol())
            start_move()
            if(mission==10 and Akustic_range(end)<2.4 and alignment()!= 1010101010101):
                mission=11
        if (mission==11):
            if(alignment()==1110101010101 or alignment()==1010101010101 ):
                mission==12
            set_course(auv.get_yaw()+alignment_angle,2,20*sr_skol())
            start_move() 
        #if(mission == 8 ):
        if(mission==12):
            set_course(auv.get_yaw(),-5,20*sr_skol())
            start_move()         
        
        
        
        
        
        
#d = (target_yaw-auv.get_yaw + 540)%360 -180
      
      
      
      
      
      
      
      
      
      
      
      
      
