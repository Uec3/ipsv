#circle - 1
#square - 2
#triangle - 3
#none-0
import pymurapi as mur
import numpy as np
import cv2 as cv
auv= mur.mur_init()
dt = np.dtype(int)
lower = np.array((0,58,127),dt)
upper = np.array((102,255,255),dt)
def recognize(img):
    cv.cvtColor(img,cv.COLOR_BGR2HSV)
    thresh = cv.inRange(img,lower,upper,img)
    contours,hierarchy=cv.findContours( thresh.copy(), cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE)
    cnt= 0 
    for cnt in contours:
        if(cv.contourArea(cnt)>300):
            area = cv.contourArea(cnt)
            area_circle=0
            #print(area)
            (x,y), r = cv.minEnclosingCircle(cnt)
            center = (int(x), int(y))
            area_circle = np.pi*r*r
            check_circle = abs(cv.contourArea(cnt)-area_circle)
            rect = cv.minAreaRect(cnt) # пытаемся вписать прямоугольник
            box = cv.boxPoints(rect) # поиск четырех вершин прямоугольника
            box = np.int0(box) # округление координат
            rectangle = cv.contourArea(box)
            check_square = abs(rectangle-cv.contourArea(cnt))
            #print(check_square)
            if(check_circle <100):
                return 1
            elif(check_square<120):
                return 2
            elif(abs(area-900)<100):
                return 3
            else:
                return 0
    cv.imshow("2",img)
    cv.waitKey(40)  
while True:
    print(recognize(auv.get_image_bottom()))
            
    
